/*
 * Use Case SQL String Extractor
 * Take all SQL string components and concate them in order of occurance.
 * Postprocessor may examine the SQL expression for the following
 * 1	Table - DAO Crossreference: Which Java Class access which table in a specfic mode?
 * 2	Analyse SQL expression for quality
 * 3	Detect transaction logic in PL/SQL statements and correlate them with Java TX
 * 
 * Solution Space
 * SQL strings shall be defined as static final prepared statements inside the DAO.
 * In this scenario, the SQL string and Java class are easy to associate.
 * But schema & table names are typically constants defined in constant "interfaces" or property files.
 * Here we need a resolving mechanism and have to use a string constant repository.
 * 
 * Example:
 *   String str = "SELECT * FROM " + LtcConstant.EMPLOYEE_TABLE; 
 * 
 * Where Clause Injection
 * Many SELECT statements are dynamically concated and parts (especially WHERE clauses) are injected.
 * The parameters (e.g. Foreign Key value) are passed in the method parameter lists and StringBuffer >> append(String)
 * or the slow "+" operator concat the SQL String. Our use case could survive by catching the parameter names. 
 * 
 * Example:
 *   String str = "Select DOC_I from EC_TRANS where DOC_I = ?"; 
 * 
 * But the table name has to be resolved and any complex SQL injection
 * 
 * Variable Stack
 * The visitor has to build a variable stack for class variables, instance & local variables, and method parameters.
 * Not only variables keeping string constants but all Strings, and StringBuffer has to be stored.
 * The dynamics of operator "+" and at least the StringBuffer API append(String) has to be simulated.
 * We have here a mass problem and a memory storage has to be replaced by a persistent store.
 * 
 * Algorithm:
 * 		First Scan
 * 			Identify all StringConstants, String, and StringBuffer and save them 
 * 			with there access level, class, modifier, line, column, and value
 * 			
 * 		Variable Resolving
 * 			Check for variables in the string variables value.
 * 			If the variable contains other vars, use a recursive approach.
 * 			Each resolved variable value will be stored and bind.
 * 			In case of any errors (e.g. variable values are result of UI or 3rd party returns), 
 * 			the constant "<varNotResolvable> will be inserted 
 *   
 * 
 * 
 * Example:
 *   String str = "Select DOC_I from (" + strWithComplexSQLString +")"; 
 * 
 * A full caller trace is needed in order to reference the source of parameters. 
 * 
 * 
 * Grammar for Cross Reference
 * We could use a ANTLR SQL grammar, but for simple cross referencing we have adavantage of a SAX-minded state graph.
 * 
 * SELECT -> FROM -> <tableName>
 * INSERT -> INTO -> <tableName>
 * UPDATE -> <tableName> 
 * DELETE -> FROM -> <tableName>
 * 
 * These SQLs may be nested, but this is irrelevant for cross referencing.
 * 
 * Challenge
 * 		Hibernate Config 
 * 
 */
package org.hammurapi.inspectors.metrics;

import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Properties;

import javax.sql.DataSource;

import org.hammurapi.BaseInspector;
import org.hammurapi.HammurapiException;
import org.hammurapi.HammurapiRuntimeException;
import org.hammurapi.results.AnnotationContext;
import org.hammurapi.results.LinkedAnnotation;
import org.hammurapi.results.AnnotationContext.FileEntry;

import com.pavelvlasov.jsel.Constructor;
import com.pavelvlasov.jsel.Interface;
import com.pavelvlasov.jsel.JselException;
import com.pavelvlasov.jsel.LanguageElement;
import com.pavelvlasov.jsel.Method;
import com.pavelvlasov.jsel.Parameter;
import com.pavelvlasov.jsel.Repository;
import com.pavelvlasov.jsel.TypeDefinition;
import com.pavelvlasov.jsel.VariableDefinition;
import com.pavelvlasov.jsel.expressions.Dot;
import com.pavelvlasov.jsel.expressions.Ident;
import com.pavelvlasov.jsel.expressions.MethodCall;
import com.pavelvlasov.jsel.expressions.Plus;
import com.pavelvlasov.jsel.expressions.PlusAssignment;
import com.pavelvlasov.jsel.expressions.StringConstant;
import com.pavelvlasov.jsel.statements.ForInitializer;
import com.pavelvlasov.persistence.CompositeStorage;
import com.pavelvlasov.review.SourceMarker;
import com.pavelvlasov.sql.JdbcStorage;
import com.pavelvlasov.sql.Parameterizer;
import com.pavelvlasov.sql.RowProcessor;
import com.pavelvlasov.sql.SQLProcessor;
import com.pavelvlasov.sql.hypersonic.HypersonicDataSource;
import com.pavelvlasov.sql.hypersonic.HypersonicInMemoryDataSource;
import com.pavelvlasov.sql.hypersonic.HypersonicServerDataSource;
import com.pavelvlasov.sql.hypersonic.HypersonicStandaloneDataSource;


/**
 * @author MUCBJ0
 *
 * TODO To change the template for this generated type comment go to
 * Window - Preferences - Java - Code Style - Code Templates
 */
public class SqlStringExtractor extends BaseInspector {

    //-- everything with prefix current* represents the current source
    private StringVariable currentVariable =null;
    private String currentClassName = "";
    private String currentClassFcn = "";
	private static int counter=0;
	
	//!! TEST ONLY
	private SQLProcessor sqlProcessor = null;
	//!! memory greed prob .. pass to DB; reinitalized in visit(TypeDef)
	private Hashtable variableTable = new Hashtable();
	
	private SQLProcessor getProcessor(SourceMarker marker) {
		// JdbcStorage jdbcStorage = (JdbcStorage) ((CompositeStorage) context.getStorage()).getStorage(JdbcStorage.class);
	    JdbcStorage jdbcStorage = new JdbcStorage(this.sqlProcessor);
		if (jdbcStorage==null) {
			context.warn(marker, "Could not obtain JdbcStorage");
			return null;
		} else {
			return jdbcStorage.getProcessor();
		}		
	}
	/**
	 * Unique table name
	 */
	// private String sqlTableName="SQL_STRING_LITERALS_"+Long.toString(System.currentTimeMillis(),32)+"_"+ ++counter;
	private String sqlTableName="SQL_STRING_LITERALS";
	// private String varTableName="VAR_DEF_LITERALS_"+Long.toString(System.currentTimeMillis(),32)+"_"+ ++counter;
	private String varTableName="VAR_DEF_LITERALS";
	/*
	 * 
	 * 
	 */
	private String[] initSQL= {
			"CREATE CACHED TABLE "+sqlTableName+
			" (LITERAL VARCHAR(250), SOURCE VARCHAR(250), LINE INTEGER, COL INTEGER,  CLASS_NAME VARCHAR(250), CLASS_FCN VARCHAR(250))",
			"CREATE INDEX IX_"+sqlTableName+" ON "+sqlTableName+" (LITERAL, SOURCE, LINE, COL)"	,
			
			"CREATE CACHED TABLE "+varTableName+
			" (VAR_NAME VARCHAR(250), VAR_VALUE  VARCHAR(250), SOURCE VARCHAR(250), LINE INTEGER, COL INTEGER, CLASS_NAME VARCHAR(250), CLASS_FCN VARCHAR(250))",
			"CREATE INDEX IX_"+varTableName+" ON "+varTableName+" (VAR_NAME, VAR_VALUE, SOURCE, LINE, COL)"	

	};			
	
	private String[] destroySQL= {
			"CREATE INDEX IX_"+sqlTableName,	
			"DROP TABLE "+sqlTableName,
			
			"CREATE INDEX IX_"+varTableName,	
			"DROP TABLE "+varTableName
	};

	/**
	 * Creating a table to store results
	 */
	public void init() throws HammurapiException {
        super.init();

        HypersonicDataSource dataSource;
        // SQLProcessor processor=getProcessor(null);
         try {
            dataSource = new HypersonicServerDataSource(
                    
                    "jdbc:hsqldb:hsql://localhost/job") {
                /*
                protected void initDB() throws SQLException {
                    System.out.println("<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<");
                    try {
                        super.initDB("");
                    
                        SQLProcessor p1 = new SQLProcessor(this, null);
                        for (int i = 0; i < initSQL.length; i++) {
                            System.out.println(initSQL[i]);
                            p1.processUpdate(initSQL[i], null);
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
                */
            };
            
            sqlProcessor = new SQLProcessor(dataSource, null);
        } catch (Exception e) {
            e.printStackTrace();
            throw new HammurapiException("Could not obtain SQLProcessor "
                    + e.getMessage());
        }
        /*
         * 
         * SQLProcessor processor=new SQLProcessor(dataSource, null); if
         * (processor==null) { throw new HammurapiException("Could not obtain
         * SQLProcessor"); }
         * 
         * for (int i=0; i <initSQL.length; i++) { try {
         * processor.processUpdate(initSQL[i], null); } catch (SQLException e) {
         * throw new HammurapiException(e); } }
         *  
         */
    }
	
	public void visit(TypeDefinition p){
	    System.out.println ( variableTable.size() + " -- " + p.getName()  );
	    //-- store current state
	    storeCurrentState();
	    
	    //-- reinitalize
	    variableTable = new Hashtable();
	    currentClassName = p.getName();
	    currentClassFcn = p.getFcn();
	}
	
	public void visit(Interface p){
	    System.out.println ( variableTable.size() + " -- " + p.getName()  );
	    //-- store current state
	    storeCurrentState();
	    
	    //-- reinitalize
	    variableTable = new Hashtable();
	    currentClassName = p.getName();
	    currentClassFcn = p.getFcn();
	}

    public void visit(MethodCall methodCall) {
        // System.out.println("*> " + methodCall.getMethodName() );
        
        if( "append".equals( methodCall.getMethodName()) ){
            
                System.out.println( currentVariable.name );
            
            //StringBuffer currentVarValue = (StringBuffer) variableTable  .get(id.toString());

          }
        
    	/*	Code code = methodCall.getEnclosingCode();
			try {
			    // System.out.println("*> " + methodCall.getProvider().toString());
                if( code != null){
        				Operation op = (Operation) code;
        			// OperationInfo provider = new OperationInfo(code);
        			TypeBody tb = code.getEnclosingType();
          
                String key = tb.getFcn()+ ">>" +op.getOperationSignature();
               // System.out.println( key );
                } else {
                    // System.out.println( "code null" );
                }
            } catch (JselException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
            */
    }
    public void visit(final Plus aPlus) {
        //System.out.println(" Plus "  + aPlus );
        
        try {
            
        if( "java.lang.String".equals( aPlus.getTypeSpecification().toString())){
        //System.out.println(" Plus "  + aPlus.getOperands() );
        List lst = aPlus.getOperands();
        // System.out.println(" instanceof "  + lst.get(lst.size()-1).getClass().toString() );
/*        
        String lastString = (String)lst.get(lst.size()-1);
        StringBuffer tempString = currentString;
        tempString.append(lastString);
        currentString= tempString;
        
           System.out.println(" currentString "  + currentString );
        } else {
            // handle variable of method call
            System.out.println( "+++ " +lst.get(lst.size()-1) );
        }
 */       
        } 
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
       
    }
    
    public void visit(final PlusAssignment aPlus) {
        System.out.println(" PlusAssignment " );
    }
/*
 * Problem: Parameter Strings are visited AFTER method internals
 */
    public void visit(final Parameter aParam) {
        // System.out.println(" Parameter " + aParam);
        try {
            if( aParam.getTypeSpecification().isKindOf("java.lang.String") 
                    || aParam.getTypeSpecification().isKindOf("java.lang.StringBuffer") ){
            
            currentVariable = new StringVariable(
                    				aParam, 
                    				new StringBuffer("<"+ aParam.getName() +">" ) ,
                    				aParam.getName(),
                    				"Parameter",
                    				currentClassName,
                    				currentClassFcn);
 /*           currentVariable.langElement= aParam;
            currentVariable.type = "Parameter";
            currentVariable.varValue = new StringBuffer("<"+ aParam.getName() +">" );
  */          // saveLanguageElement( currentVariable.langElement, currentVariable.varValue.toString() );
            variableTable.put( aParam.getName(),  currentVariable );
            //this.currentStringValue = new StringBuffer();
            }
        } catch (JselException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }
    
    public void visit(final VariableDefinition varDef) {
     //   System.out.println("## varDef "+ varDef);
        try {
            if( varDef.getTypeSpecification().isKindOf("java.lang.String") 
                    || varDef.getTypeSpecification().isKindOf("java.lang.StringBuffer") ){
                if(currentVariable != null && currentVariable.langElement != null ){
 
                    // reinitalize 
                if(   currentVariable.langElement instanceof VariableDefinition) {
                    variableTable.put( ((VariableDefinition) currentVariable.langElement).getName(),  currentVariable) ;
                } else if (   currentVariable.langElement instanceof Parameter ) {
                    variableTable.put( ((Parameter) currentVariable.langElement).getName(),  currentVariable );
                }
                }
                currentVariable = new StringVariable(
        				varDef, 
        				new StringBuffer() ,
        				varDef.getName(),
        				"local variable",
        				currentClassName,
        				currentClassFcn);
              
            } else {
                // not a String Var: Reset current stack.
                currentVariable = new StringVariable(
        				varDef, 
        				new StringBuffer() ,
        				varDef.getName(),
        				"local variable: not a String type",
        				currentClassName,
        				currentClassFcn);          }
        } catch (JselException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }
    public void visit(Dot dot) {
        
    }   
    
    public void visit( Constructor le) {
        //System.out.println("Constructor " + le.toString());
    }
    public void visit( Method le) {
       // System.out.println("Method " + le.toString());
    }
    public void visit( ForInitializer le) {
        //System.out.println("ForInitializer " + le.toString());
    }
        
    //!! Problem: static class vars: search term is var name without class name only.
    /*
     * 	Ident AnotherDaoObject
     	Ident LTC_REPORT_DB
     	Ident LTC_REPORT_DB<--"LTC_REPORT"
     	
     	Johannes,

In AnotherDaoObject.LTC_REPORT_DB you need to invoke getProvider() of the 
last ident and you'll get a reference to LTC_REPORT_DB field in 
AnotherDaoObject, which would be of type VariableDefinition, Parameter, 
TypeDefiniton for source files and java.lang.reflect.Field for external 
classes, ... See JavaDoc 
http://www.pavelvlasov.com/products/Jsel/doc/api/com/pavelvlasov/jsel/expressions/Ident.html#getProvider().
---
Best regards, Pavel.

    */
    
    public void visit(final Ident id) {
        // System.out.println("Ident " + id.toString());
        try {
            final Object provider = id.getProvider();
            if (provider != null
                    && ((provider instanceof VariableDefinition) && (((VariableDefinition) provider)
                            .getTypeSpecification()
                            .isKindOf("java.lang.String") 
                         || ((VariableDefinition) provider)
                         		.getTypeSpecification().isKindOf(
                                    "java.lang.StringBuffer")))
                    || (provider instanceof Parameter && (((Parameter) provider)
                            .getTypeSpecification()
                            .isKindOf("java.lang.String") 
                         || ((Parameter) provider)
                            .getTypeSpecification().isKindOf(
                                    "java.lang.StringBuffer")))) {
                
                StringVariable svTmp = (StringVariable)variableTable.get(id.toString());
                StringBuffer currentVarValue;

                if(svTmp != null ){
                    currentVarValue = svTmp.varValue;
                } else {
                    currentVarValue = new StringBuffer();
                }

                // handle public static Class variables
                LanguageElement le = ((LanguageElement) id).getParent();
                if (le instanceof Dot && le.getAst().getNumberOfChildren() == 2) {
                    String className = le.getAst().getFirstChild().getText();
                    StringVariable currentVariableX = (StringVariable) variableTable  .get(className);
                    
                    // not a class but a StringBuffer Variable or something
                    if( currentVariableX != null ){
             //           System.out.println("currentVarValueX " + currentVariableX.name );
                        currentVariable = currentVariableX; 
/*                        
                        currentVariable.varValue.append(currentVarValue);
                        // put here the right Hand to left hand side assignment
                        System.out.println("Ident "
                                + currentVariable.name.toString() + "<--"
                                + currentVariable.varValue);
                        saveLanguageElement(currentVariable.langElement,
                                currentVariable.varValue.toString());
*/
                        // System.out.println("Ident " + currentVariable.name.toString() + "<--" + currentVariable.varValue);
                    } else{
                    String currentLangElementName = className + "."
                            + id.toString();
 //!!                   
// variableTable.put(currentLangElementName, );
                    // System.out.println("Ident added: " + currentLangElementName + " " + currentVariable.varValue);

                    currentVariable.varValue.append(" <");
                    currentVariable.varValue.append(currentLangElementName);
                    currentVariable.varValue.append("> ");
                    }
                } else if (currentVarValue != null && currentVarValue.length() > 0) {

                    currentVariable.varValue.append(currentVarValue);
                    // put here the right Hand to left hand side assignment
                    // System.out.println("Ident " + currentVariable.name.toString() + "<--"  + currentVariable.varValue);
                    // saveLanguageElement(currentVariable.langElement,currentVariable.varValue.toString());

                } else {
                    boolean paramIsFound = false;
                    // unresolved variables -- assumption: Operation Parameters
                    LanguageElement lex = currentVariable.langElement
                            .getParent().getParent();
                    if (lex instanceof Method) {
                        Method met = (Method) lex;
                        // System.out.println("Ident currentVariable ..  " + met.getName());
                        Iterator it = met.getParameters().iterator();
                        while (it.hasNext()) {
                            Parameter p = (Parameter) it.next();
                           // System.out.println("p.getName()  " + p.getName());
                            if (id.toString().equals(p.getName())) {
                                paramIsFound = true;
                            }
                        }
                        
                        if (paramIsFound) {
                            currentVariable.varValue.append("@");
                            currentVariable.varValue.append(currentClassName);
                            currentVariable.varValue.append(">>");
                            currentVariable.varValue.append(met.getName());
                            currentVariable.varValue.append("::");
                            currentVariable.varValue.append(id);
                            currentVariable.varValue.append("-- ");
                            // saveLanguageElement(currentVariable.langElement,  currentVariable.varValue.toString());
                            variableTable.put(currentVariable.name, currentVariable );
                            // System.out.println("Ident currentVariable "+ currentVariable.name +" varValue " + currentVariable.varValue);
                        }                     
                    }
                }
            }
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

        // try to resolve string
        /*
         * try { if (currentLangElement != null) { System.out.println("
         * currentString " + currentLangElement.toString() + " <- " +
         * currentStringValue); }
         * 
         * final Object provider = id.getProvider(); if (provider != null &&
         * provider instanceof VariableDefinition && (((VariableDefinition)
         * provider).getTypeSpecification() .isKindOf("java.lang.String") ||
         * ((VariableDefinition) provider) .getTypeSpecification().isKindOf(
         * "java.lang.StringBuffer"))) { System.out.println("OO " +
         * provider.toString()); SQLProcessor processor =
         * getProcessor((SourceMarker) id); if (processor != null) { // check
         * for String Only ! processor.processUpdate("INSERT INTO " +
         * varTableName + " (VAR_NAME, VAR_VALUE, SOURCE, LINE, COL) " + "VALUES
         * (?,?,?,?,?)", new Parameterizer() { public void
         * parameterize(PreparedStatement ps) throws SQLException {
         * ps.setString(1, id.toString()); ps.setString(2, provider.toString());
         * SourceMarker sourceMarker = (SourceMarker) id; ps.setString(3,
         * sourceMarker.getSourceURL()); ps.setInt(4, sourceMarker.getLine());
         * ps.setInt(5, sourceMarker.getColumn()); } }); } } } catch (Exception
         * e) { // TODO Auto-generated catch block e.printStackTrace(); }
         */
    }
    public String cutLeadingTrailingQuote(String str){
        String tmpString = str;
        if( str != null ){
            if ( str.charAt(0) == '"'){
                tmpString = str.substring(1);
            }
            str = tmpString;
            if ( str.charAt(str.length()-1) == '"' && (str.length()-1)> -1 ) {
                tmpString = str.substring(0, str.length()-1);
            }
        }
        return tmpString;
    }
    
    public void visit(final StringConstant constant) {
        // System.out.println("++ "+ constant.toString() );
        
        final String constantCopy = cutLeadingTrailingQuote( constant.toString() );
        // System.out.println("++ "+ constantCopy );
        currentVariable.varValue.append(constantCopy);
        logCurrentLangElement();
            }

    private void storeCurrentState() {
        if (currentClassName != null && !"".equals(currentClassName)) {
            Enumeration enum = this.variableTable.elements();
            while (enum.hasMoreElements()) {
                StringVariable sVar = (StringVariable) enum.nextElement();
                this.saveLanguageElement(sVar);
            }
        }
    }

    
   // public void saveLanguageElement(final LanguageElement langElement, final String currentStringValue) {
    private void saveLanguageElement(final StringVariable strVar ) {
        System.out.println("** saveLanguageElement "+ strVar.langElement.toString() );
        
        
    	final boolean[] ret={false};
        SQLProcessor processor = getProcessor((SourceMarker) strVar.langElement);
        if (processor != null) {
            try {
                 String templangElementName = "<unresolved>";
                if(  strVar.langElement instanceof VariableDefinition) {
                    templangElementName = ((VariableDefinition) strVar.langElement).getName();
                } else if (  strVar.langElement instanceof Parameter ) {
                    templangElementName = ((Parameter) strVar.langElement).getName();
                } 
                final String langElementName = templangElementName;
               // System.out.println(langElementName + " :- "+ currentStringValue );
                // check for String Only !
                
                //-- is entry already available?
                processor.processSelect(
						"SELECT 'variable', SOURCE, LINE, COL,  VAR_NAME, VAR_VALUE , CLASS_NAME, CLASS_FCN FROM "+varTableName
						+ " WHERE VAR_NAME = ? " +
								"AND CLASS_NAME = ?" +
								"AND CLASS_FCN  = ?",
								(new Parameterizer() {
				                    public void parameterize(PreparedStatement ps)
				                            throws SQLException {
				                        ps.setString(1, langElementName);
				                        ps.setString(2, strVar.className);
				                        ps.setString(3, strVar.classFcn);
				                    }}),
				            new RowProcessor() {
							public boolean process(ResultSet rs) throws SQLException {
								try {
								    String tmpStr = rs.getString( "VAR_NAME");
								    // System.out.println (" KKKKKKK " + tmpStr + " --"+ currentStringValue );
								    
								    ret[0] =  langElementName.equals(tmpStr) ;
								    return true;
								} catch (Exception e) {
									throw new HammurapiRuntimeException(e);
								}
							}
						});	
				
                
                //-- update entry
                
                if( ret[0] ){
                    // System.out.println (" KKKKKKK UPDATE" );
                    processor.processUpdate(

                            "UPDATE " + varTableName
                                    + " SET "
                                    + " VAR_VALUE =  ?"
            						+ " WHERE VAR_NAME = ? " +
    								"AND CLASS_NAME = ?" +
    								"AND CLASS_FCN  = ?",
                                    
                                     new Parameterizer() {
                                public void parameterize(PreparedStatement ps)
                                        throws SQLException {
                                    ps.setString(1, strVar.varValue.toString());
			                        ps.setString(2, langElementName);
			                        ps.setString(3, strVar.className);
			                        ps.setString(4, strVar.classFcn);
                                }
                            });

                } else {
                 //   System.out.println (" KKKKKKK INSERT" );
                //-- insert entry
                processor.processUpdate(

                "INSERT INTO " + varTableName
                        + " (VAR_NAME, VAR_VALUE, SOURCE, LINE, COL,  CLASS_NAME, CLASS_FCN) "
                        + "VALUES (?,?,?,?,?,?,?)", new Parameterizer() {
                    public void parameterize(PreparedStatement ps)
                            throws SQLException {
                        ps.setString(1, langElementName);
                        ps.setString(2, strVar.varValue.toString());
                        SourceMarker sourceMarker = (SourceMarker) strVar.langElement;
                        ps.setString(3, sourceMarker.getSourceURL());
                        ps.setInt(4, sourceMarker.getLine());
                        ps.setInt(5, sourceMarker.getColumn());
                        ps.setString(6, strVar.className);
                        ps.setString(7, strVar.classFcn);
                    }
                });
                } //fi
            } catch (SQLException e) {
                context.warn((SourceMarker) strVar.langElement, e);
            }
        }

    }

    private void logCurrentLangElement(){
        if ( currentVariable.langElement != null ){
            // System.out.println(" currentString " + currentVariable.langElement.toString() +" <- "  +  currentVariable.varValue );
        } else {
            // System.out.println(" currentString is null" );
        }
    }

public void leave(Repository repo) {
    
    this.storeCurrentState();
	final SQLProcessor processor=getProcessor(null);
	if (processor!=null) {
		context.annotate(new LinkedAnnotation() {
			String path;

			public String getPath() {
				return path;
			}

			public String getName() {
				return "String literals";
			}

			public void render(AnnotationContext context) throws HammurapiException {
				FileEntry a = context.getNextFile(".html");
				path=a.getPath();
				try {
					final Writer w=new FileWriter(a.getFile());
					try {
						w.write("<HTML><BODY><TABLE border=\"1\"><TR><TH>Var Name</TH><TH>Var Value</TH><TH>File</TH><TH>Line</TH><TH>Column</TH><TH>Class</TH><TH>FCN</TH></TR>");
						processor.processSelect(
								"SELECT * FROM (" +
							//	"SELECT 'constant', SOURCE, LINE, COL, '<->',     LITERAL,    CLASS_NAME, CLASS_FCN FROM "+sqlTableName
							//	+" UNION " +
								"SELECT 'variable', SOURCE, LINE, COL,  VAR_NAME, VAR_VALUE , CLASS_NAME, CLASS_FCN FROM "+varTableName
								+ ") ORDER BY SOURCE, LINE, COL",
								null,
								new RowProcessor() {
									public boolean process(ResultSet rs) throws SQLException {
										try {
											w.write("<TR><TD>");
											// w.write(rs.getString("LITERAL"));
											w.write(rs.getString( 5 ));
											w.write("</TD><TD>");
											
											w.write(rs.getString( 6 )); // VAR_VALUE or LITERAL
											w.write("</TD><TD>");
											// w.write(rs.getString( 1 ));
											// w.write("</TD><TD>");
																				
											w.write(rs.getString("SOURCE"));
											w.write("</TD><TD aligh=\"right\">");
											w.write(rs.getString("LINE"));
											w.write("</TD><TD aligh=\"right\">");
											w.write(rs.getString("COL"));
											w.write("</TD><TD>");
											w.write(rs.getString("CLASS_NAME"));
											w.write("</TD><TD>");
											w.write(rs.getString("CLASS_FCN"));
											
											w.write("</TD><TR>");
											return true;
										} catch (IOException e) {
											throw new HammurapiRuntimeException(e);
										}
									}
								});	
						/*
						processor.processSelect(
								"SELECT * FROM "+varTableName+" ORDER BY SOURCE, LINE, COL, VAR_VALUE, VAR_NAME",
								null,
								new RowProcessor() {
									public boolean process(ResultSet rs) throws SQLException {
										try {
											w.write("<TR><TD>");
											w.write(rs.getString("VAR_VALUE"));
											w.write("   :- ");
											w.write(rs.getString("VAR_NAME"));
											w.write("</TD><TD>");
											w.write(rs.getString("SOURCE"));
											w.write("</TD><TD aligh=\"right\">");
											w.write(rs.getString("LINE"));
											w.write("</TD><TD aligh=\"right\">");
											w.write(rs.getString("COL"));
											w.write("</TD><TR>");
											return true;
										} catch (IOException e) {
											throw new HammurapiRuntimeException(e);
										}
									}
								});						
							*/
						w.write("</TABLE></BODY></HTML>");
					} finally {
						w.close();
					}
				} catch (SQLException e) {
					throw new HammurapiException(e);
				} catch (HammurapiRuntimeException e) {
					throw new HammurapiException(e.getCause());
				} catch (IOException e) {
					throw new HammurapiException(e);
				}					
			}

			public Properties getProperties() {
				return null;
			}				
		});
	}
	
}

public void destroy() {
	SQLProcessor processor=getProcessor(null);
	if (processor==null) {
		System.err.println("Could not obtain SQLProcessor");
	}
	
	for (int i=0; i<destroySQL.length; i++) {
		try {
			processor.processUpdate(initSQL[i], null);
		} catch (SQLException e) {
			System.err.println("Could not delete tables");
			e.printStackTrace();
		}
	}		
	super.destroy();
}

}
