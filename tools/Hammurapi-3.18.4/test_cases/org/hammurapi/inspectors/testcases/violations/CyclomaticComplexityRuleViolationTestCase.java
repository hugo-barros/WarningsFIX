/*
 * Hammurapi
 * Automated Java code review system. 
 * Copyright (C) 2004  Hammurapi Group
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * URL: http://www.hammurapi.org
 * e-Mail: support@hammurapi.biz

*/
package org.hammurapi.inspectors.testcases.violations;

/**
 * CyclomaticComplexityRule
 * @author  Pavel Vlasov
 * @version $Revision: 1.1 $
 */
public class CyclomaticComplexityRuleViolationTestCase {

	private static org.apache.log4j.Logger logger =
		org.apache.log4j.Logger.getRootLogger();

	private static final int INT_ZERO = 0;
	private static final int INT_1 = 1;
	private static final int NEG_INT_1 = -INT_1;
	private static final int INT_2 = 2;
	private static final int NEG_INT_2 = -INT_2;
	private static final int INT_3 = 3;
	private static final int NEG_INT_3 = -INT_3;

	private static final String CONST_SPACE = " ";
	private static final char CONST_A = 'A';
	private static final char CHAR_B = 'B';

	// --- VIOLATION ---
	/** Java doc automaticaly generated by Hammurapi */
	public int complexMethod(final String strToProc, final boolean firstType) {
		if (firstType) {
			if (strToProc == null) {
				return INT_1;
			} else if (strToProc.length() == INT_ZERO) {
				return INT_2;
			} else if (strToProc.length() == INT_1 && 
				strToProc.equalsIgnoreCase(CONST_SPACE)) {
				return INT_3;
			} else {
				int retVal = INT_ZERO;
				for (int i = INT_ZERO; i < strToProc.length(); i++) {
					if (strToProc.charAt(i) == CONST_A || 
						i % INT_3 == INT_2) {
						retVal++;
					} else {
						retVal += INT_2;
					}
				}
				return retVal;
			}
		} else {
			if (strToProc == null) {
				return NEG_INT_1;
			} else if (strToProc.length() == INT_ZERO) {
				return NEG_INT_2;
			} else if (strToProc.length() == INT_1 &&
				strToProc.equalsIgnoreCase(CONST_SPACE)) {
				return NEG_INT_3;
			} else {
				int retVal = INT_ZERO;
				for (int i = INT_ZERO; i < strToProc.length(); i++) {
					if (strToProc.charAt(i) == CONST_A ||
						i % INT_3 == INT_2) {
						retVal--;
					} else if (strToProc.charAt(i) == CHAR_B ||
							i % INT_3 == INT_2) {
						retVal -= INT_2;
					} else {
						retVal -= INT_3;
					}
				}
				return retVal;
			}
		}
	}
	//--- END VIOLATION ---

	/** Java doc automaticaly generated by Hammurapi */
	public int tooComplexClassMethod(final int valToProc) {
		int retVal = INT_ZERO;

		if (valToProc < INT_2 || valToProc > INT_3) {
			retVal = INT_1;
		}

		return retVal;
	}
}

